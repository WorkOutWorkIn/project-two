import React from "react";
import { useState, useEffect } from "react"
import './Chatbox.css';
import { database } from "../Db/Firebase";
import { collection, query, getDocs, addDoc, orderBy, doc, getDoc, serverTimestamp } from "firebase/firestore"
import { getAuth, signOut, onAuthStateChanged } from "firebase/auth";
import { useNavigate } from "react-router-dom";

//currentUser sees a bunch of chat rooms based on his/her matches with other people
//when he/she clicks into an individual chat room, we already have the chatroom ID (which is autogenerated)
//within the chatroom ID we store a subcollection of "messages", and an array field of users in this chat which will contain the user's UID and the recipients UID
//once we have the recipients UID, we use it to search within the users collection to pull out their name and the random fun fact
// 

export default function Chatbox() {

  const navigate = useNavigate();
  const [messages, setMessages] = useState([])
  const [currentMessage, setCurrentMessage] = useState("")
  const [currentUser, setCurrentUser] = useState({})
  const [otherUserID, setOtherUserID] = useState("")
  const [userInfo, setUserInfo] = useState({})

  //chatRoomID taken from when a user clicks to enter a specific chat
  const chatRoomID = "EjdSdVX0F6dcvdz5MNUk"

  async function setUserFunction(array) {
    setOtherUserID(array)
  }

  async function setUserInfoFunction(object) {
    setUserInfo(object)
  }

  async function getUsersInformation() {
    try {
      const usersListRef = doc(database, "matches", `${chatRoomID}`);
      const users = await getDoc(query(usersListRef))
      let usersArray = users.data().users
      await setUserFunction(usersArray[1])
    } catch (error) { alert(error.message) }
  }

  async function setUsersProfileInformation() {
    try {
      const userInformationListRef = doc(database, "users", `${otherUserID}`, "profile", `${otherUserID}profile`);
      const userInfo = await getDoc(query(userInformationListRef))
      let userInfoToUse = userInfo.data()
      await setUserInfoFunction(userInfoToUse)
    } catch (error) { alert(error.message) }
  }

  function getMessages() {
    const messageListRef = collection(database, "matches", `${chatRoomID}`, "messages");
    getDocs(query(messageListRef, orderBy('createdAt')))
      .then(response => {
        const message = response.docs.map(doc =>
        ({
          data: doc.data(),
          id: doc.id,
        }))
        setMessages(message)
      }).catch((error) => { alert(error.message) })
  }


  function handleSubmit() {
    const messageListRef = collection(database, "matches", `${chatRoomID}`, "messages")
    addDoc(messageListRef, { message: currentMessage, displayName: currentUser.displayName, senderID: currentUser.uid, createdAt: serverTimestamp(), timestamp: new Date().toLocaleString([], { year: 'numeric', month: 'numeric', day: 'numeric', hour: '2-digit', minute: '2-digit' }) }).then(response => {
    }).catch(error => { console.log(error.message) })
    setCurrentMessage("")
    getMessages()
    console.log(currentUser)
  }

  //check user auth then set currentUser properties as the user taken from auth
  useEffect(() => {
    const auth = getAuth();
    onAuthStateChanged(auth, (user) => {
      if (user) {
        setCurrentUser(user)
      } else setCurrentUser(null)
    });
  }, [])

  //sign out the user and navigate back to home page
  function signingOut() {
    signOut(getAuth()).then(() => {
      console.log("signed out!")
      navigate("/");

    }).catch((error) => {
      alert(error.message)
    });
  }



  return (
    <div className="chatbox flex center">
      <div className="chatbox__header flex left">
        {/* templated message, taking in other user's displayName */}
        <p>It's a match! You and {userInfo.name} like each other!<br />
          Get to know each other and if sparks fly, take the conversation offline to meet up in person.<br />
          This chat closes automatically after 7 days of inactivity</p>
      </div>


      {/* random fact about user plus other user */}
      <div className="chatbox__other flex">
        <p>Here's a random fact about {userInfo.name}:<br />
          {userInfo.randomfact}
        </p>
      </div>
      <div className="chatbox__main flex">
        <p>Random fact about you that was shared to {userInfo.name}:<br />
          (USER'S FUN FACT)
        </p>
      </div>


      <div className="chatbox__display flex">
        {messages.map(message =>
          <div key={message.id}>
            {message.data.senderID === currentUser.uid ? <div className="flex right">{message.data.displayName}: {message.data.message} <br /> {message.data.timestamp} </div> : <div className="flex left">{message.data.displayName}: {message.data.message} <br /> {message.data.timestamp}</div>}
          </div>)}
      </div>


      <div className="chatbox__text">
        {/* texbot for user to input his/her message to send */}
        <p>input text screen here</p>
        <input type="text" value={currentMessage} onChange={(e) => setCurrentMessage(e.target.value)} /><br />
        <button type="submit" onClick={handleSubmit} disabled={currentMessage === ""}>send</button>
      </div>
      <br />
      <div className="chatbox__text">
        Functional testing buttons<br />
        <button onClick={signingOut}>Sign Out!</button>
        <button onClick={getMessages}>Get Messages!</button>
        <button onClick={getUsersInformation}>Get User's info</button>
        <button onClick={setUsersProfileInformation}>Set User's info</button>
      </div>

    </div>

  )

}


// export default function Chatbox() {

//   const [messages, setMessages] = useState([])
//   const [currentMessage, setCurrentMessage] = useState("")
//   const [currentUser, setCurrentUser] = useState({})
//   const navigate = useNavigate();
//   const chatRoomID = props.chatRoomID
//   // "HlEMUvoRtzRsidaRtjrDbcgQVOx1_c2La9FfDgdSMgbSZdK8ZL1Qhd0j1"

//   useEffect(() => {
//     const auth = getAuth();
//     onAuthStateChanged(auth, (user) => {
//       if (user) {
//         setCurrentUser(user)
//       } else setCurrentUser(null)
//     });
//   }, [])

//   function signingOut() {
//     signOut(getAuth()).then(() => {
//       console.log("signed out!")
//       navigate("/");

//     }).catch((error) => {
//       alert(error.message)
//     });
//   }

//   //hardcoded dummy data
//   let chatRoomIDSplit = chatRoomID.split("_")
//   let recipientUID = chatRoomIDSplit[2]
//   let recipientDisplayName = "jiawen"

//   let senderRandomFact = "i am darren"
//   let recipientRandomFact = "my name is jiawen"

//   return (

//     <div className="chatbox flex center">
//       <div className="chatbox__header flex left">
//         {/* templated message, taking in other user's displayName */}
//         <p>It's a match! You and {recipientDisplayName} uid = {recipientUID} like each other!<br />
//           Get to know each other and if sparks fly, take the conversation offline to meet up in person.<br />
//           This chat closes automatically after 7 days of inactivity</p>
//       </div>


//       {/* random fact about user plus other user */}
//       <div className="chatbox__other flex">
//         <p>Here's a random fact about {recipientDisplayName}:<br />
//           {recipientRandomFact}
//         </p>
//       </div>
//       <div className="chatbox__main flex">
//         <p>Random fact about you that was shared to {recipientDisplayName}:<br />
//           {senderRandomFact}
//         </p>
//       </div>


//       <div className="chatbox__display flex">
//         {messages.map(message =>
//           <div key={message.id}>
//             {message.data.senderID === currentUser.uid ? <div className="flex right">{message.data.displayName}: {message.data.message} <br /> {message.data.timestamp} </div> : <div className="flex left">{message.data.senderID}: {message.data.message}</div>}
//           </div>)}
//       </div>


//       <div className="chatbox__text">
//         {/* texbot for user to input his/her message to send */}
//         <p>input text screen here</p>
//         <input type="text" value={currentMessage} onChange={(e) => setCurrentMessage(e.target.value)} /><br />
//         <button type="submit" onClick={handleSubmit} disabled={currentMessage === ""}>send</button>
//       </div>

//       <button onClick={signingOut}>Sign Out!</button>
//     </div>
//   )
// }




// useEffect(() => {
//   getMessages()
//   // eslint-disable-next-line
// }, []);

// useEffect(() => {
//   console.log(messages)
// }, [messages]);



// function getMessages() {

//   const messageListRef = collection(database, "chats", `${chatRoomID}`, "chat");

//   getDocs(query(messageListRef, orderBy('timestamp', 'desc')))
//     .then(response => {
//       const message = response.docs.map(doc =>
//       ({
//         data: doc.data(),
//         id: doc.id,
//       }))
//       setMessages(message)
//     }).catch((error) => { alert(error.message) })
// }


// function handleSubmit() {
//   const messageListRef = collection(database, "chats", `${chatRoomID}`, "chat")
//   addDoc(messageListRef, { message: currentMessage, displayName: currentUser.displayName, senderID: currentUser.uid, timestamp: new Date().toLocaleString([], { year: 'numeric', month: 'numeric', day: 'numeric', hour: '2-digit', minute: '2-digit' }) }).then(response => {
//   }).catch(error => { console.log(error.message) })
//   setCurrentMessage("")
//   getMessages()
//   console.log(currentUser)
// }


// import React from "react";
// import { useState, useEffect } from "react"
// import './Chatbox.css';
// import { database } from "../Db/Firebase";
// import { collection, query, getDocs, addDoc, orderBy } from "firebase/firestore"
// import { getAuth, signOut, onAuthStateChanged } from "firebase/auth";
// import { useNavigate } from "react-router-dom";

// export default function Chatbox() {

//   const [messages, setMessages] = useState([])
//   const [currentMessage, setCurrentMessage] = useState("")
//   const [currentUser, setCurrentUser] = useState({})

//   let recipientUID = "hoJkQOPeh1ehoGHbjWHX6sDewjj2"
//   let recipientDisplayName = "IU"

//   let chatRoomID = `${currentUser.uid}${recipientUID}`

//   let senderRandomFact = "My name is Darren"
//   let recipientRandomFact = "I am a singer"


//   useEffect(() => {
//     const auth = getAuth();
//     onAuthStateChanged(auth, (user) => {
//       if (user) {
//         setCurrentUser(user)
//       } else setCurrentUser(null)
//     });
//   }, [])

//   useEffect(() => {
//     getMessages()
//     // eslint-disable-next-line
//   }, []);

//   useEffect(() => {
//     console.log(messages)
//   }, [messages]);

//   let navigate = useNavigate();
//   function signingOut() {


//     signOut(getAuth()).then(() => {
//       console.log("signed out!")
//       navigate("/");

//     }).catch((error) => {
//       alert(error.message)
//     });
//   }

//   function usersDocumentIDs () {

//     const messageListRef = collection(database, "chats", `${chatRoomID}`, "chat");

//     getDocs(query(messageListRef, orderBy('timestamp', 'desc')))
//       .then(response => {
//         const message = response.docs.map(doc =>
//         ({
//           data: doc.data(),
//           id: doc.id,
//         }))
//         setMessages(message)
//       }).catch((error) => { alert(error.message) })
//   }



//   function getMessages() {

//     const messageListRef = collection(database, "chats", `${chatRoomID}`, "chat");

//     getDocs(query(messageListRef, orderBy('timestamp', 'desc')))
//       .then(response => {
//         const message = response.docs.map(doc =>
//         ({
//           data: doc.data(),
//           id: doc.id,
//         }))
//         setMessages(message)
//       }).catch((error) => { alert(error.message) })
//   }


//   function handleSubmit() {
//     const messageListRef = collection(database, "chats", `${chatRoomID}`, "chat")
//     addDoc(messageListRef, { message: currentMessage, displayName: currentUser.displayName, senderID: currentUser.uid, timestamp: new Date().toLocaleString([], { year: 'numeric', month: 'numeric', day: 'numeric', hour: '2-digit', minute: '2-digit' }) }).then(response => {
//     }).catch(error => { console.log(error.message) })
//     setCurrentMessage("")
//     getMessages()
//     console.log(currentUser)
//   }

//   return (

//     <div className="chatbox flex center">
//       <div className="chatbox__header flex left">
//         {/* templated message, taking in other user's displayName */}
//         <p>It's a match! You and {recipientDisplayName} like each other!<br />
//           Get to know each other and if sparks fly, take the conversation offline to meet up in person.<br />
//           This chat closes automatically after 7 days of inactivity</p>
//       </div>


//       {/* random fact about user plus other user */}
//       <div className="chatbox__other flex">
//         <p>Here's a random fact about {recipientDisplayName}:<br />
//           {recipientRandomFact}
//         </p>
//       </div>
//       <div className="chatbox__main flex">
//         <p>Random fact about you that was shared to {recipientDisplayName}:<br />
//           {senderRandomFact}
//         </p>
//       </div>


//       <div className="chatbox__display flex">
//         {messages.map(message =>
//           <div key={message.id}>
//             {message.data.senderID === currentUser.uid ? <div className="flex right">{message.data.displayName}: {message.data.message} <br /> {message.data.timestamp} </div> : <div className="flex left">{message.data.senderID}: {message.data.message}</div>}
//           </div>)}
//       </div>


//       <div className="chatbox__text">
//         {/* texbot for user to input his/her message to send */}
//         <p>input text screen here</p>
//         <input type="text" value={currentMessage} onChange={(e) => setCurrentMessage(e.target.value)} /><br />
//         <button type="submit" onClick={handleSubmit} disabled={currentMessage === ""}>send</button>
//       </div>

//       <button onClick={signingOut}>Sign Out!</button>
//     </div>
//   )
// }


    // let p = new Promise((resolve, reject) => {
    //   let result = getMessages()
    //   if (result === true) {
    //     resolve("success")
    //   } else reject("failed")
    // })

    // p.then((message) => {
    //   console.log(message)
    // }).catch((message) => { console.log(message) })


//things i need to take note of:
// mainuseruid
//otheruseruid
//mainuserdisplayname
//otheruserdisplayname
//sub-collectionname which is useruid1+useruid2
//messages to capture: message content, timestamp, sender, recipient
//hoJkQOPeh1ehoGHbjWHX6sDewjj2wVHTJcJkeAVynY9QCJoVt9DOhqU2

//get senderID and senderDisplayName
//put it in the message
//add the message
//get the message